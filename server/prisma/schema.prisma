generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique @db.VarChar(40)
  password          String             @db.VarChar(100)
  phoneNo           String             @map("phone_no")
  userType          userType
  doctors           Doctor[]
  patients          Patient[]
  notifications     Notification[]
}

model Doctor {
  id                 String                @id @default(uuid())
  userId             String                @map("user_id")
  speciality         String[]                
  experienceYrs      Int                   @map("experience_yrs")
  firstName          String                @map("fname") @db.VarChar(30)
  lastName           String                @map("lname") @db.VarChar(30)
  licenseNo          String                @map("license_no") @db.VarChar(30)
  documentUrl        String[]              
  profilePic         String                @map("profile_pic") @db.VarChar(400)
  user               User                  @relation(fields: [userId], references: [id])
  timeTables         DoctorTimeTable[]
  workLocations      DoctorWorkLocation[]
  referredTo         DoctorReference[]     @relation("ReferredToDoctor")
  referredBy         DoctorReference[]     @relation("ReferringDoctor")
  patientHistories   PatientHistory[]
  paymentTransactions PaymentTransactions[]
}
model Patient {
  id                  String                @id @default(uuid())
  firstName           String                @map("patient_fname") @db.VarChar(30)
  lastName            String                @map("patient_lname") @db.VarChar(30)
  userId              String                @map("user_id")
  dateOfBirth         DateTime              @map("dob")
  
  weight              Int
  height              Int
  gender              String                @db.VarChar(10)
  city                String                @db.VarChar(30)
  state               String                @db.VarChar(30)
  otherPhoneNo        String                @db.VarChar(30) @map("other_phone_no")
  user                User                  @relation(fields: [userId], references: [id])
  allergies           Allergies[]
  medications         Medications[]
  patientHistories    PatientHistory[]
  paymentTransactions PaymentTransactions[]
  surgicalHistories   SurgicalHistory[]
  doctorReferences    DoctorReference[]
  appointments        AppointmentSchedule[]
}

model AppointmentSchedule {
  id                    String             @id @default(uuid())
  doctorAvailabilityId  String             @map("doctor_availability_id")
  patientId             String             @map("patient_id")
  appointmentDate       DateTime           @map("appointment_date")
  startTime             DateTime           @map("start_time")
  endTime               DateTime           @map("end_time")
  mode                  Mode
  workLocationId        String             @map("work_location_id")
  status                Status
  doctorAvailability    DoctorAvailability @relation(fields: [doctorAvailabilityId], references: [id])
  patient               Patient            @relation(fields: [patientId], references: [id])
  doctorWorkLocation    DoctorWorkLocation @relation(fields: [workLocationId], references: [id])
  reviews               Review[]
}

model Allergies {
  id          String  @id @default(uuid())
  patientId   String  @map("patient_id")
  name        String  @map("allergy_name") @db.VarChar(100)
  description String  @map("allergy_description") @db.Text
  patient     Patient @relation(fields: [patientId], references: [id])
}



model DoctorWorkLocation {
  id            String                @id @default(uuid())
  doctorId      String                @map("doctor_id")
  locationType  LocationType          @map("location_type")
  locationName  String                @map("location_name") @db.VarChar(30)
  city          String                @db.VarChar(30)
  state         String                @db.VarChar(30)
  pincode       String                @db.VarChar(30)
  country       String                @db.VarChar(30)
  coordinates   String                @map("coordinates") @db.VarChar(100)
  doctor        Doctor                @relation(fields: [doctorId], references: [id])
  timeTables    DoctorTimeTable[]
  appointments  AppointmentSchedule[]
}

model DoctorTimeTable {
  id                  String               @id @default(uuid())
  doctorId            String               @map("doctor_id")
  workLocationId      String               @map("doctor_work_location_id")
  day                 Day
  startTime           DateTime             @map("start_time")
  endTime             DateTime             @map("end_time")
  date                DateTime
  doctor              Doctor               @relation(fields: [doctorId], references: [id])
  workLocation        DoctorWorkLocation   @relation(fields: [workLocationId], references: [id])
  doctorAvailability  DoctorAvailability[]
}

model DoctorAvailability {
  id               String                @id @default(uuid())
  timeTableId      String                @map("doctor_time_table_id")
  date             DateTime
  startTime        DateTime              @map("start_time")
  endTime          DateTime              @map("end_time")
  isAvailable      Availability          @default(yes) @map("is_available")
  timeTable        DoctorTimeTable       @relation(fields: [timeTableId], references: [id])
  appointments     AppointmentSchedule[]
}

model DoctorReference {
  id                String   @id @default(uuid())
  patientId         String   @map("patient_id")
  doctorId          String   @map("doctor_id")
  referredToDoctorId String   @map("referred_to_doctor_id")
  referenceDateTime DateTime @map("reference_date_time")
  patient           Patient  @relation(fields: [patientId], references: [id])
  referringDoctor   Doctor   @relation("ReferringDoctor", fields: [doctorId], references: [id])
  referredToDoctor  Doctor   @relation("ReferredToDoctor", fields: [referredToDoctorId], references: [id])
}

model Medications {
  id        String  @id @default(uuid())
  patientId String  @map("patient_id")
  name      String  @map("medication_name") @db.VarChar(255)
  dosage    String  @map("medication_dosage") @db.VarChar(255)
  frequency String  @map("medication_frequency") @db.VarChar(255)
  patient   Patient @relation(fields: [patientId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String           @map("user_id")
  message   String           @db.VarChar(50)
  type      NotificationType @map("notification_type")
  readStatus Boolean         @default(false) @map("read_status")
  timestamp DateTime
  user      User             @relation(fields: [userId], references: [id])
}

model PatientHistory {
  id               String   @id @default(uuid())
  patientId        String   @map("patient_id")
  doctorId         String   @map("doctor_id")
  appointmentDate  DateTime @map("appointment_date")
  chiefComplaint   String   @map("chief_complaint") @db.VarChar(40)
  patient          Patient  @relation(fields: [patientId], references: [id])
  doctor           Doctor   @relation(fields: [doctorId], references: [id])
}

model PaymentTransactions {
  id            String   @id @default(uuid())
  patientId     String   @map("patient_id")
  doctorId      String   @map("doctor_id")
  paymentDate   DateTime @map("payment_date")
  paymentAmount Decimal  @map("payment_amount") @db.Decimal(10, 2)
  paymentMethod String   @map("payment_method") @db.VarChar(50)
  patient       Patient  @relation(fields: [patientId], references: [id])
  doctor        Doctor   @relation(fields: [doctorId], references: [id])
}

model Review {
  id                    String              @id @default(uuid())
  appointmentScheduleId String              @map("appointment_schedule_id")
  reviewerType          ReviewerType
  rating                Int
  reviewText            String              @map("review_text") @db.VarChar(100)
  appointmentSchedule   AppointmentSchedule @relation(fields: [appointmentScheduleId], references: [id])
}

model SurgicalHistory {
  id          String  @id @default(uuid())
  patientId   String  @map("patient_id")
  type        String  @map("surgical_history_type") @db.VarChar(255)
  description String  @map("surgical_history_description") @db.Text
  patient     Patient @relation(fields: [patientId], references: [id])
}


enum Status {
  pending
  booked
  cancelled
  completed
}

enum Availability {
  yes
  no
}

enum Day {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

enum LocationType {
  hospital
  clinic
}

enum NotificationType {
  appointment
  reminder
  update
  referral
}

enum ReviewerType {
  patient
  doctor
  admin
}

enum Mode {
  online
  offline
  hybrid
}
enum userType{
  doctor
  patient
  admin
}



